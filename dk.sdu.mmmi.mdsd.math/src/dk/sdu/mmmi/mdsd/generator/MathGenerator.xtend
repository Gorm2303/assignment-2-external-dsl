/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator

import dk.sdu.mmmi.mdsd.math.MathExp
import dk.sdu.mmmi.mdsd.math.Factor
import java.util.HashMap
import java.util.Map
import javax.swing.JOptionPane
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.mdsd.math.Plus
import dk.sdu.mmmi.mdsd.math.Minus

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathGenerator extends AbstractGenerator {

	static Map<String, Integer> variables = new HashMap();
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(MathExp).next
		val result = math.compute
		
		// You can replace with hovering, see Bettini Chapter 8
		result.displayPanel
	}
	
	//
	// Compute function: computes value of expression
	// Note: written according to illegal left-recursive grammar, requires fix
	//
	
	def static compute(MathExp math) { 
		math.exp.computeExp
		return variables
	}
	
def static int computeExp(Exp exp) {
        val left = exp.left.computeFactor
        switch exp.operator {
            Plus: return left + exp.right.computeExp
            Minus: return left - exp.right.computeExp
            default: return left
        }
    }

    def static int computeFactor(Factor factor) {
        val left = factor.left.computePrimary
        switch factor.operator {
            Mult: return left * factor.right.computeFactor
            Div: return left / factor.right.computeFactor
            default: return left
        }
    }

    def static int computePrimary(Primary prim) { 
        switch prim {
            Number: return prim.value
            Parenthesis: return prim.exp.computeExp
            VariableUse: return variables.get(prim.variable.name)
            VariableBinding: {
                variables.put(prim.variable.name, prim.exp.computeExp)
                return variables.get(prim.variable.name)
            }
            default: throw new IllegalArgumentException("Unknown primary: " + prim)
        }
    }

	def void displayPanel(Map<String, Integer> result) {
		var resultString = ""
		for (entry : result.entrySet()) {
         	resultString += "result " + entry.getKey() + " = " + entry.getValue() + "\n"
        }
		
		JOptionPane.showMessageDialog(null, resultString ,"Math Language", JOptionPane.INFORMATION_MESSAGE)
	}
}
